% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/splicewiz_wrappers.R
\name{get_ase_data_matrix_heatmap}
\alias{get_ase_data_matrix_heatmap}
\title{Generate a heatmap for a given list of ASE.}
\usage{
get_ase_data_matrix_heatmap(
  se,
  event_names,
  samples,
  column_condition = "condition",
  method = "PSI",
  summarise_groups = TRUE,
  summarise_groups_by = "mean",
  show_row_names = FALSE,
  cluster_rows = FALSE,
  cluster_columns = FALSE,
  show_column_dend = FALSE,
  show_row_dend = FALSE,
  ...
)
}
\arguments{
\item{se}{an object of class NxtSE.}

\item{event_names}{a character vector denoting valid spliceWiz event names.}

\item{samples}{a character vector denoting valid sample names.}

\item{column_condition}{a name of column in se storing condition. Deafault: "condition".}

\item{method}{one of the character strings: "Z-score", "PSI" ,"logit".}

\item{summarise_groups}{pass to \code{summarise_groups} of \code{\link[=get_ASE_data_matrix]{get_ASE_data_matrix()}}.}

\item{summarise_groups_by}{pass to \code{summarise_groups_by} of \code{\link[=get_ASE_data_matrix]{get_ASE_data_matrix()}}.}

\item{show_row_names}{logical, whether to show row names in the heatmap.}

\item{cluster_rows}{logical, whether to clusters rows in the heatmap.}

\item{cluster_columns}{logical, whether to cluster column in the heatmap or not.}

\item{show_column_dend}{logical, whether to show column dendrogram in the heatmap or not.}

\item{show_row_dend}{logical, whether to show row dendrogram in the heatmap or not.}

\item{...}{other parameters to pass \code{\link[ComplexHeatmap:Heatmap]{ComplexHeatmap::Heatmap()}}}
}
\value{
a heatmap
}
\description{
Generate a heatmap for a given list of ASE.
}
\examples{
se <- SpliceWiz::SpliceWiz_example_NxtSE(novelSplicing = TRUE)
SpliceWiz::colData(se)$treatment <- rep(c("A", "B"), each = 3)
SpliceWiz::colData(se)$replicate <- rep(c("P","Q","R"), 2)
res <- run_ase_diff_analysis(x = se, test_factor = "treatment", test_nom = "A" ,test_denom = "B",  IRmode ="annotated",  cutoff_lfc = 0.6, cutoff_padj = 1, regul_based_upon = 2)
event_names = get_ASEsets_by_regulation(x = res, sample_comparisons = "A_VS_B", regul = "all") \%>\% unlist()

get_ase_data_matrix_heatmap(se, event_names = event_names, samples = c("A" ,"B"), column_condition    = "treatment", summarise_groups = FALSE )
get_ase_data_matrix_heatmap(se, event_names = event_names, samples = c("A" ,"B"), column_condition    = "treatment", summarise_groups = TRUE )
get_ase_data_matrix_heatmap(se, event_names = event_names, samples = c("P" ,"Q","R"), column_condition    = "replicate",method = "Z-score", cluster_rows = TRUE)

}
