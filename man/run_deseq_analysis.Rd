% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rnaseq_related.R
\name{run_deseq_analysis}
\alias{run_deseq_analysis}
\title{Perform differential expression analysis using \code{\link[DESeq2:DESeq]{DESeq2::DESeq()}}}
\usage{
run_deseq_analysis(
  counts,
  column_geneid,
  column_samples,
  sample_info,
  group_numerator,
  group_denominator,
  delim = "\\t",
  comment_char = "#",
  min_counts = 10,
  min_replicates = 1,
  cutoff_lfc = 1,
  cutoff_pval = 0.05,
  cutoff_padj = 0.01,
  regul_based_upon = 1,
  ...
)
}
\arguments{
\item{counts}{a character string providing a name of count file or a data frame of counts for each gene.
See details below to know more about format of file and count data frame.}

\item{column_geneid}{a character string denoting a column of geneid in \code{counts}}

\item{column_samples}{a character vector denoting names of sample columns from \code{counts}}

\item{sample_info}{a character string denoting a name of sample information file or a data frame.
A file or a data frame both must have at least two columns without column names. First column denotes to samples names
and second column denotes group name for each sample in first column. For e.g.\tabular{ll}{
    \tab  \cr
   sample 1 \tab WT \cr
   sample 2 \tab WT \cr
   sample 3 \tab KO \cr
   sample 4 \tab KO \cr
}}

\item{group_numerator}{a character vector denoting sample groups to use in numerator to calculate fold change.}

\item{group_denominator}{a character vector denoting sample groups to use in denominator to calculate fold change.}

\item{delim}{a character denoting deliminator for \code{count} file. Only valid if \code{count} is a file path.}

\item{comment_char}{a character denoting comments line in count file. Only valid if \code{count} is a file path.}

\item{min_counts}{a numeric value, default 10,  denoting minimum counts for a gene to be used o consider a
gene for differential expression analysis.}

\item{min_replicates}{a numeric value, default 1, denoting minimum samples within a group must have \code{minimum_counts}.
Value provided must not be higher than number of replicates in each group.
For example for given values \code{min_replicates = 2} and  \code{minimum_counts = 10}
the genes which have minimum counts 10 in atleast 2 sample groups will be used for DEG.}

\item{cutoff_lfc}{a numeric value which is internally passed to \link{categorize_diff_genes}}

\item{cutoff_pval}{a numeric value which is internally passed to \link{categorize_diff_genes}}

\item{cutoff_padj}{a numeric value which is internally passed to \link{categorize_diff_genes}}

\item{regul_based_upon}{either of 1, 2 or 3 which is internally passed to \link{categorize_diff_genes}}

\item{...}{for future use}
}
\value{
a data frame of DESeq results, DEG, and DEG summary.
}
\description{
This is a wrapper function build upon \code{\link[DESeq2:DESeq]{DESeq2::DESeq()}}  and  \code{\link[DESeq2:DESeqResults]{DESeq2::DESeqResults()}}
to find diff genes and categories them based on various cutoffs such p-value, padj-value, log2fc etc.
It also allows selecting genes for diff analysis based upon minimum counts across
samples within a group (e.g. minimum counts across replicate samples).
}
\examples{
\dontrun{

set.seed(123)
# create dummy RNAseq (dummy) count matrix
counts <- matrix(rnbinom(n=1000, mu=100, size=1/0.5), ncol=10) \%>\%
  as.data.frame() \%>\% tibble::as_tibble()

colnames(counts) <- c(paste("c" , c(1:5), sep = ""),c(paste ("d" , 1:5, sep = "")))

counts \%<>\%  dplyr::mutate("Geneid" = stringi::stri_rand_strings(n = 100, length = 5))  \%>\%
  dplyr::relocate("Geneid")
# create sample info
si <- tibble::tibble(samples = colnames(counts)[-1] , sample_groups = factor(rep(c("c","d"), each=5)))

res <- get_deg(counts = counts ,
               sample_info = si,
               column_geneid = "Geneid" , group_numerator = "d" , group_denominator = "c",
               column_samples = c("c1","c2","c3","c4" ,"c5" ,"d1" ,"d2","d3" ,"d4" ,"d5"))

names <- paste(res$)

## DESEq result object(s)
res$dsr

## DESEq result data frame
res$dsr_tibble

## DESEq result data frame  DEG assigned, look at the columns 'signif' and 'regul'

res$dsr_tibble_deg

res$dsr_tibble_deg[[1]] \%>\% dplyr::filter(regul != "other")

## DEG summary

res$deg_summmary

}

}
