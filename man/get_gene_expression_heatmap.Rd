% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rnaseq_related.R
\name{get_gene_expression_heatmap}
\alias{get_gene_expression_heatmap}
\alias{get_fold_change_heatmap}
\title{Generate a heatmap of normalised gene expression values, z-score or log2Fold-change values.}
\usage{
get_gene_expression_heatmap(
  x,
  samples,
  genes,
  repair_genes = FALSE,
  convert_log2 = FALSE,
  color_default = TRUE,
  col = NULL,
  convert_zscore = TRUE,
  convert_rowmeans = FALSE,
  summarise_replicates = TRUE,
  summarise_method = "median",
  show_row_names = FALSE,
  cluster_rows = TRUE,
  show_row_dend = TRUE,
  row_names_font_size = 10,
  label_specific_rows = NULL,
  label_specific_rows_gp = gpar(fontface = "plain", fontsize = 10, col = "red"),
  show_column_names = TRUE,
  cluster_columns = TRUE,
  show_heatmap_legend = TRUE,
  ...
)

get_fold_change_heatmap(
  x,
  sample_comparisons,
  genes,
  repair_genes = FALSE,
  color_default = TRUE,
  col = NULL,
  show_row_names = FALSE,
  cluster_rows = TRUE,
  show_row_dend = TRUE,
  row_names_font_size = 10,
  show_column_names = TRUE,
  cluster_columns = TRUE,
  show_heatmap_legend = TRUE,
  ...
)
}
\arguments{
\item{x}{an abject of the class \code{parcutils}. This is can be created using the function \code{\link[=run_deseq_analysis]{run_deseq_analysis()}}.}

\item{samples}{a character vector denoting sample names to use in the heatmap.}

\item{genes}{a character vector denoting genes to use in the heatmap.}

\item{repair_genes}{logical, default \code{FALSE}, indicating whether to repair gene names. See details.}

\item{convert_log2}{logical, default \code{FALSE}, indicating whether to log2 transform gene expression values.}

\item{color_default}{logical, default \code{TRUE}, indicating whether to use default heatmap colors.}

\item{col}{an output of \code{\link[circlize:colorRamp2]{circlize::colorRamp2()}}, default NULL.}

\item{convert_zscore}{logical, default \code{TRUE}, indicating whether to convert gene expression values in to the z-score or not. see details.}

\item{convert_rowmeans}{logical, default \code{FALSE}, indicating whether to subtract gene expression values from mean of the each row.
It is recommended to use \code{convert_log2 = TRUE} while using \code{convert_rowmeans = TRUE}.}

\item{summarise_replicates}{logical, default \code{TRUE}, indicating whether to summarise values for each gene across replicates.}

\item{summarise_method}{a character string, either mean or median.}

\item{show_row_names}{logical, default \code{FALSE}, indicating whether to show row names in the heatmap or not.
Internally this argument is passed to the function \code{\link[ComplexHeatmap:Heatmap]{ComplexHeatmap::Heatmap()}}.}

\item{cluster_rows}{logical, default \code{TRUE}, indicating whether to cluster rows in the heatmap or not.
Internally this argument is passed to the function \code{\link[ComplexHeatmap:Heatmap]{ComplexHeatmap::Heatmap()}}.}

\item{show_row_dend}{logical, default \code{TRUE}, indicating whether to show dendrogram in the heatmap or not.
Internally this argument is passed to the function \code{\link[ComplexHeatmap:Heatmap]{ComplexHeatmap::Heatmap()}}.}

\item{row_names_font_size}{a numeric value, default 10, indicating size of row names in the heatmap.}

\item{label_specific_rows}{a character string denoting set of gene/s to be labelled in the heatmap. Label must match to the rownames of the final matrix supplied.}

\item{label_specific_rows_gp}{pass to  \code{labels_gp} of the function  \code{\link[ComplexHeatmap:anno_mark]{ComplexHeatmap::anno_mark()}}.}

\item{show_column_names}{logical, default \code{TRUE}, indicating whether to show column names in the heatmap or not.
Internally this argument is passed to the function \code{\link[ComplexHeatmap:Heatmap]{ComplexHeatmap::Heatmap()}}.}

\item{cluster_columns}{logical, default \code{TRUE}, indicating whether to cluster columns in the heatmap or not.
Internally this argument is passed to the function \code{\link[ComplexHeatmap:Heatmap]{ComplexHeatmap::Heatmap()}}.}

\item{show_heatmap_legend}{logical, default \code{TRUE}, indicating whether to show heatmap legend or not.}

\item{...}{Other parameters to be passes to \code{\link[ComplexHeatmap:Heatmap]{ComplexHeatmap::Heatmap()}}.}

\item{sample_comparisons}{a character vector denoting sample comparisons for which heatmap of log2 fold-change to be plotted.}
}
\value{
an output of the function \code{\link[ComplexHeatmap:Heatmap]{ComplexHeatmap::Heatmap()}}.
}
\description{
Heatmap is a common tool to show gene expression pattern across samples in RNA-seq experiments.
During data exploration, it is a common practice to generate several heatmaps to identify interesting
patterns of gene expression across samples. Most heatmap generating tools require data in a tabular format.
However, to prepare such a data requires significant data wrangling such as sub-setting
genes (rows) and samples (columns) from multiple R objects. Such data wrangling creates redundant, and less readable code
which increases the chances of error. Furthermore, because of less readability using the same code for another analysis
requires code cleaning and code rewriting making code less reusable.
Situations complicates even more when RNA-seq studies consist of several samples and several comparisons.
This function cut-downs several steps of data wrangling to create a heatmap of gene expression, z-score or
log2 fold-change. Given an object of the class \code{parcutils}, sample names or sample comparisons, genes to show in the heatmap
and several other arguments, the heatmap can be created quickly. The output heatmap is an output of the function \code{\link[ComplexHeatmap:Heatmap]{ComplexHeatmap::Heatmap()}}
which then can be used with other functions of the \href{https://jokergoo.github.io/ComplexHeatmap-reference/book/}{ComplexHeatmap} package.
}
\details{
The function \code{get_gene_expression_heatmap} is to create a heatmap either for normalised gene expression or z-score values
while the function \code{get_fold_change_heatmap} is to create a heatmap for log2 fold-changes values.
\itemize{
\item \code{repair_genes} :  Internally gene names are stored as a "gene_id:gene_symbol" format. For example, "ENSG00000187634:SAMD11".
When \code{repair_genes} is set to \code{TRUE} the string corresponding to gene_id followed by ":" will be removed. This is useful when gene names
to be revealed in the heatmap.
\item \code{convert_zscore} :  When set to \code{TRUE} values for each gene is converted into z-score. z-score is calculated by baser r function \code{\link[base:scale]{base::scale()}}
with all default parameters.
}
}
\examples{

count_file <- system.file("extdata","toy_counts.txt" , package = "parcutils")
count_data <- readr::read_delim(count_file, delim = "\t")

sample_info <- count_data \%>\% colnames() \%>\% .[-1]  \%>\%
 tibble::tibble(samples = . , groups = rep(c("control" ,"treatment1" , "treatment2"), each = 3) )


res <- run_deseq_analysis(counts = count_data ,
                         sample_info = sample_info,
                         column_geneid = "gene_id" ,
                         group_numerator = c("treatment1", "treatment2") ,
                         group_denominator = c("control"))

genes = parcutils::get_genes_by_regulation(x = res, sample_comparison = "treatment2_VS_control" , "both") \%>\% names()
get_gene_expression_heatmap(x = res, samples = c("control" ,"treatment1" , "treatment2"), genes = genes, label_specific_rows = c("POU5F1","PTPN18","RABL3","PTPN19"),repair_genes = TRUE,show_row_names = FALSE)

# plot raw expression values

get_gene_expression_heatmap(x = res, samples = c("control" ,"treatment1" , "treatment2"),
genes = genes, convert_zscore = FALSE)

# plot log2 expression values

get_gene_expression_heatmap(x = res, samples = c("control" ,"treatment1" , "treatment2"),
genes = genes, convert_zscore = FALSE,convert_log2 = TRUE)

# plot all replicates

get_gene_expression_heatmap(x = res, samples = c("control" ,"treatment1" , "treatment2"),
genes = genes, convert_zscore = TRUE, summarise_replicates = FALSE)

# show gene names

get_gene_expression_heatmap(x = res, samples = c("control" ,"treatment1" , "treatment2"),
genes = genes[1:10], convert_zscore = TRUE, summarise_replicates = FALSE , show_row_names = TRUE)

# repair gene names

get_gene_expression_heatmap(x = res, samples = c("control" ,"treatment1" , "treatment2"),
genes = genes[1:10], convert_zscore = TRUE, summarise_replicates = FALSE, show_row_names = TRUE, repair_genes = TRUE)

# fold change heatmap

get_fold_change_heatmap(x = res , sample_comparisons = c("treatment2_VS_control" ,"treatment1_VS_control") ,
genes = genes , cluster_columns = FALSE , name = "Log2FC")


}
