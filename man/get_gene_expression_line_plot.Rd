% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/viz_related.R
\name{get_gene_expression_line_plot}
\alias{get_gene_expression_line_plot}
\alias{get_fold_change_line_plot}
\title{Generate a line plot for gene expression / fold change values.}
\usage{
get_gene_expression_line_plot(
  x,
  samples,
  genes,
  summarise_replicates = TRUE,
  summarise_method = "median",
  scale_log10 = TRUE,
  line_color = "red",
  line_transparancy = 0.5,
  show_average_line = TRUE,
  average_line_color = "black",
  average_line_size = 1,
  average_line_summary_method = "median"
)

get_fold_change_line_plot(
  x,
  sample_comparisons,
  genes,
  line_color = "red",
  line_transparancy = 0.5,
  show_average_line = TRUE,
  summarise_method = "median",
  average_line_color = "black",
  average_line_size = 1,
  average_line_summary_method = "median"
)
}
\arguments{
\item{x}{an abject of class "parcutils". This is an output of the function \code{\link[=run_deseq_analysis]{run_deseq_analysis()}}.}

\item{samples}{a character vector denoting sample names to show in the heatmap.}

\item{genes}{a character vector denoting genes to show in the heatmap.}

\item{summarise_replicates}{logical, default TRUE, indicating whether to summarise values for each gene across replicates.}

\item{summarise_method}{a character string, default median, denoting a summary method to average gene expression values across replicates. Values can be either mean or median.}

\item{scale_log10}{logical, default TRUE, denoting whether to transform y scale on log10 scale.}

\item{line_color}{a character string, default "red", denoting color for each line in the plot.}

\item{line_transparancy}{a numeric, default 0.5, denoting transparency of each line in the plot.}

\item{show_average_line}{logical, default TRUE, denoting whether to show line for average gene expression values.}

\item{average_line_color}{a character string, default "black", denoting a color for average line.}

\item{average_line_size}{a numeric, default 1, denoting size for average line.}

\item{average_line_summary_method}{a character string, default median, denoting a summary method used to generate an average line. Values can be one of the mean or median.}

\item{sample_comparisons}{a character vector denoting sample comparisons.
possible values can be found from \code{x$comp}.}
}
\value{
ggplot2.
}
\description{
Generate a line plot for gene expression / fold change values.
}
\examples{

count_file <- system.file("extdata","toy_counts.txt" , package = "parcutils")
count_data <- readr::read_delim(count_file, delim = "\t")

sample_info <- count_data \%>\% colnames() \%>\% .[-1]  \%>\%
  tibble::tibble(samples = . , groups = rep(c("control" ,"treatment1" , "treatment2"), each = 3) )


res <- parcutils::run_deseq_analysis(counts = count_data ,
                                     sample_info = sample_info,
                                     column_geneid = "gene_id" ,
                                     group_numerator = c("treatment1", "treatment2") ,
                                     group_denominator = c("control"))

genes = parcutils::get_genes_by_regulation(x = res, sample_comparison = "treatment2_VS_control" , "both")
get_gene_expression_line_plot(x = res, samples = c("control", "treatment1" ,"treatment2"), genes = genes, line_transparancy = 0.1, average_line_color = "red", summarise_method = "mean")

get_fold_change_line_plot(x = res, sample_comparisons = c("treatment1_VS_control", "treatment2_VS_control"), genes = genes,average_line_summary_method =  "mean")
}
