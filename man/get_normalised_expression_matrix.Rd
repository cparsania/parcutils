% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rnaseq_related.R
\name{get_normalised_expression_matrix}
\alias{get_normalised_expression_matrix}
\title{Prepare a matrix of normalised gene expression values}
\usage{
get_normalised_expression_matrix(
  x,
  samples = NULL,
  genes = NULL,
  summarise_replicates = FALSE,
  summarise_method = "median"
)
}
\arguments{
\item{x}{an abject of class "parcutils". This is an output of the function \code{\link[=run_deseq_analysis]{run_deseq_analysis()}}.}

\item{samples}{a character vector denoting samples for which normalised gene expression values to be derived, Default NULL. If NULL it returns all samples in x}

\item{genes}{a character vector denoting gene names for which normalised gene expression values to be derived, Default NULL. If NULL it returns all samples in x.}

\item{summarise_replicates}{logical, default FALSE, indicating whether gene expression values summarised by mean or median between replicates.}

\item{summarise_method}{a character string either "mean" or "median" by which normalised gene expression values will be summarised between replicates.}
}
\value{
a dataframe.
}
\description{
This function returns a dataframe having first column gene names and subsequent columns are
normalised gene expression values for the samples passed through \code{samples}.
}
\examples{
count_file <- system.file("extdata","toy_counts.txt" , package = "parcutils")
count_data <- readr::read_delim(count_file, delim = "\t")

sample_info <- count_data \%>\% colnames() \%>\% .[-1]  \%>\%
 tibble::tibble(samples = . , groups = rep(c("control" ,"treatment1" , "treatment2"), each = 3) )


res <- run_deseq_analysis(counts = count_data ,
                         sample_info = sample_info,
                         column_geneid = "gene_id" ,
                         group_numerator = c("treatment1", "treatment2") ,
                         group_denominator = c("control"),
                         column_samples = c("control_rep1", "treat1_rep1", "treat2_rep1", "control_rep2", "treat1_rep2", "treat2_rep2", "control_rep3", "treat1_rep3", "treat2_rep3"))


get_normalised_expression_matrix(x = res) \%>\% print()

# summarise replicates by median

get_normalised_expression_matrix(x = res ,summarise_replicates = T, summarise_method = "median") \%>\% print()
}
