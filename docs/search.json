[{"path":"https://cparsania.github.io/parcutils/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Chirag Parsania Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cparsania.github.io/parcutils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"https://cparsania.github.io/parcutils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parsania C (2022). parcutils: Utility Functions Deal Day Day Bioinformatics Tasks.. R package version 0.1.0, https://github.com/cparsania/parcutils.","code":"@Manual{,   title = {parcutils: Utility Functions To Deal Day To Day Bioinformatics Tasks.},   author = {Chirag Parsania},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/cparsania/parcutils}, }"},{"path":"https://cparsania.github.io/parcutils/index.html","id":"parcutils","dir":"","previous_headings":"","what":"Utility Functions To Deal Day To Day Bioinformatics Tasks.","title":"Utility Functions To Deal Day To Day Bioinformatics Tasks.","text":"goal parcutils provide day day bioinformatics utility functions. functions mostly wrapper functions written top core bioconductor functions.","code":""},{"path":"https://cparsania.github.io/parcutils/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utility Functions To Deal Day To Day Bioinformatics Tasks.","text":"","code":"if(require(\"devtools\") && require(\"BiocManager\")){   options(repos = BiocManager::repositories() )   devtools::install_github(\"cparsania/parcutils\") } else{   install.packages(c(\"devtools\",\"BiocManager\"))   options(repos = BiocManager::repositories() )   devtools::install_github(\"cparsania/parcutils\") }"},{"path":"https://cparsania.github.io/parcutils/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Utility Functions To Deal Day To Day Bioinformatics Tasks.","text":"basic example shows solve common problem:","code":""},{"path":"https://cparsania.github.io/parcutils/index.html","id":"intergenic-regions-and-signal-intensity","dir":"","previous_headings":"","what":"Intergenic regions and signal intensity","title":"Utility Functions To Deal Day To Day Bioinformatics Tasks.","text":"Given .gff file .bw file, identify genome wide intergenic regions signal intensity. Export results IGV snapshot showing genes(blue), intergenic regions (red) intergenic intensities (green).","code":"library(parcutils)   bw_file <- system.file(\"extdata\" , \"example.bw\" , package = \"parcutils\") gff_file <- system.file(\"extdata\" , \"C_glabrata_CBS138_version_s02-m07-r06_features.gff\" ,package = \"parcutils\")  oo <- parcutils::get_intergenic_signals(bw_file = bw_file,gff_file  = gff_file)  oo  #> GRanges object with 3715 ranges and 1 metadata column: #>                        seqnames      ranges strand |     score #>                           <Rle>   <IRanges>  <Rle> | <numeric> #>      [1] ChrA_C_glabrata_CBS138      1-1607      + |   1.08453 #>      [2] ChrA_C_glabrata_CBS138   2637-2670      + |  14.50112 #>      [3] ChrA_C_glabrata_CBS138  4810-11696      + |   1.98691 #>      [4] ChrA_C_glabrata_CBS138 13043-14976      + |   7.80337 #>      [5] ChrA_C_glabrata_CBS138 15887-17912      + |   4.28257 #>      ...                    ...         ...    ... .       ... #>   [3711] mito_C_glabrata_CBS138 17988-18003      + |   6.55200 #>   [3712] mito_C_glabrata_CBS138 18076-18084      + |   6.55200 #>   [3713] mito_C_glabrata_CBS138 18157-18179      + |   5.59057 #>   [3714] mito_C_glabrata_CBS138 18263-18280      + |   4.09500 #>   [3715] mito_C_glabrata_CBS138 18368-18403      + |   2.84375 #>   ------- #>   seqinfo: 14 sequences from an unspecified genome; no seqlengths ## export bed file   oo %>% rtracklayer::export.bed(con = file(paste(\"intergenic\", \".bed\",sep = \"\")))  ## export bdg file  oo %>% rtracklayer::export.bedGraph(con = file(paste(\"intergenic\", \".bdg\",sep = \"\")))"},{"path":"https://cparsania.github.io/parcutils/reference/EnhancedVolcano2.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around EnhancedVolcano::EnhancedVolcano — EnhancedVolcano2","title":"Wrapper around EnhancedVolcano::EnhancedVolcano — EnhancedVolcano2","text":"Wrapper around EnhancedVolcano::EnhancedVolcano","code":""},{"path":"https://cparsania.github.io/parcutils/reference/EnhancedVolcano2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around EnhancedVolcano::EnhancedVolcano — EnhancedVolcano2","text":"","code":"EnhancedVolcano2(   toptable,   lab,   x,   y,   pCutoff = 0.001,   FCcutoff = 1.5,   col_by_regul = T,   col_up = \"#b2182b\",   col_down = \"#2166ac\",   col_others = \"#e0e0e0\",   ... )"},{"path":"https://cparsania.github.io/parcutils/reference/EnhancedVolcano2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around EnhancedVolcano::EnhancedVolcano — EnhancedVolcano2","text":"toptable toptable EnhancedVolcano::EnhancedVolcano() lab lab EnhancedVolcano::EnhancedVolcano() x x EnhancedVolcano::EnhancedVolcano() y y EnhancedVolcano::EnhancedVolcano() pCutoff pCutoff EnhancedVolcano::EnhancedVolcano() FCcutoff FCcutoff EnhancedVolcano::EnhancedVolcano() col_by_regul lgl, default T, whether color variable gene regulation - , , col_up character string denoting color genes, works col_by_regul = T col_down character string denoting color genes, works col_by_regul = T. col_others character string denoting color genes, works col_by_regul = T. ... parameters pass EnhancedVolcano::EnhancedVolcano()","code":""},{"path":"https://cparsania.github.io/parcutils/reference/EnhancedVolcano2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper around EnhancedVolcano::EnhancedVolcano — EnhancedVolcano2","text":"volcano plot","code":""},{"path":"https://cparsania.github.io/parcutils/reference/categorize_diff_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorize diff genes based on log2FC, p-value and p-adj value. — categorize_diff_genes","title":"Categorize diff genes based on log2FC, p-value and p-adj value. — categorize_diff_genes","text":"// ","code":""},{"path":"https://cparsania.github.io/parcutils/reference/categorize_diff_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorize diff genes based on log2FC, p-value and p-adj value. — categorize_diff_genes","text":"","code":"categorize_diff_genes(   dsr_tibble,   log2fc_cutoff = 1,   pval_cutoff = 0.05,   padj_cutoff = 0.01,   add_column_regul = TRUE,   regul_based_upon = 1 )"},{"path":"https://cparsania.github.io/parcutils/reference/categorize_diff_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorize diff genes based on log2FC, p-value and p-adj value. — categorize_diff_genes","text":"dsr_tibble data frame obtained DESeqResult object object DESeqResult. log2fc_cutoff, pval_cutoff, padj_cutoff numeric value, default (log2fc_cutoff = 1, pval_cutoff =  0.05, padj_cutoff = 0.01) denoting cutoffs. criteria used decide significance  (NS, p-value, log2FC, p-value&log2FC) type regulation (, & ) diff genes. See details. add_column_regul logical, default TRUE, indicating whether add column  add_column_regul . Added column contain values ', '' ''. regul_based_upon one numeric choices  1, 2, 3.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/categorize_diff_genes.html","id":"if-","dir":"Reference","previous_headings":"","what":"if 1 ...","title":"Categorize diff genes based on log2FC, p-value and p-adj value. — categorize_diff_genes","text":": log2fc >= log2fc_cutoff & pvalue <= pvalue_cutoff : log2fc  <= (-1) * log2fc_cutoff & pvalue <= pvalue_cutoff : remaining genes","code":""},{"path":"https://cparsania.github.io/parcutils/reference/categorize_diff_genes.html","id":"if--1","dir":"Reference","previous_headings":"","what":"if 2 ...","title":"Categorize diff genes based on log2FC, p-value and p-adj value. — categorize_diff_genes","text":": log2fc >= log2fc_cutoff & padj <= padj_cutoff : log2fc  <= (-1) * log2fc_cutoff & padj <= padj_cutoff : remaining genes","code":""},{"path":"https://cparsania.github.io/parcutils/reference/categorize_diff_genes.html","id":"if--2","dir":"Reference","previous_headings":"","what":"if 3 ...","title":"Categorize diff genes based on log2FC, p-value and p-adj value. — categorize_diff_genes","text":": log2fc >= log2fc_cutoff & pvalue <= pvalue_cutoff & padj <= padj_cutoff : log2fc  <= (-1) * log2fc_cutoff pvalue <= pvalue_cutoff & padj <= padj_cutoff : remaining genes","code":""},{"path":"https://cparsania.github.io/parcutils/reference/categorize_diff_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorize diff genes based on log2FC, p-value and p-adj value. — categorize_diff_genes","text":"data frame","code":""},{"path":"https://cparsania.github.io/parcutils/reference/categorize_diff_genes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Categorize diff genes based on log2FC, p-value and p-adj value. — categorize_diff_genes","text":"// . --> explain columns 'signif' 'type' returned data frame.","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/dsr_to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert DESeq result object in to a tibble. — dsr_to_tibble","title":"Convert DESeq result object in to a tibble. — dsr_to_tibble","text":"Convert DESeq result object tibble.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/dsr_to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert DESeq result object in to a tibble. — dsr_to_tibble","text":"","code":"dsr_to_tibble(x, .col_gene_id = \"gene_id\")"},{"path":"https://cparsania.github.io/parcutils/reference/dsr_to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert DESeq result object in to a tibble. — dsr_to_tibble","text":"x DESeq2::DESeqResults() object","code":""},{"path":"https://cparsania.github.io/parcutils/reference/dsr_to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert DESeq result object in to a tibble. — dsr_to_tibble","text":"data frame","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/filter_df_by_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter expression matrix (dataframe) by genes(first column). — filter_df_by_genes","title":"Filter expression matrix (dataframe) by genes(first column). — filter_df_by_genes","text":"Filter expression matrix (dataframe) genes(first column).","code":""},{"path":"https://cparsania.github.io/parcutils/reference/filter_df_by_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter expression matrix (dataframe) by genes(first column). — filter_df_by_genes","text":"","code":"filter_df_by_genes(df, genes)"},{"path":"https://cparsania.github.io/parcutils/reference/filter_df_by_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter expression matrix (dataframe) by genes(first column). — filter_df_by_genes","text":"df gene expression data frame genes acharacter vector genes filtred df.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/filter_df_by_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter expression matrix (dataframe) by genes(first column). — filter_df_by_genes","text":"filtered dataframe.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/filter_df_by_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter expression matrix (dataframe) by genes(first column). — filter_df_by_genes","text":"","code":"if (FALSE) {  # TO DO }"},{"path":"https://cparsania.github.io/parcutils/reference/filter_gff.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter rows from GFF file. — filter_gff","title":"Filter rows from GFF file. — filter_gff","text":"Filter rows GFF file.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/filter_gff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter rows from GFF file. — filter_gff","text":"","code":"filter_gff(   gtf_file,   feature_type = \"gene\",   feature_biotype = \"protein_coding\",   column_gene_id = \"gene_id\",   column_feature_type = \"type\",   column_feature_biotype = \"gene_biotype\" )"},{"path":"https://cparsania.github.io/parcutils/reference/filter_gff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter rows from GFF file. — filter_gff","text":"gtf_file // feature_type // feature_biotype // column_gene_id // column_feature_type // column_feature_biotype // ","code":""},{"path":"https://cparsania.github.io/parcutils/reference/filter_gff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter rows from GFF file. — filter_gff","text":"// ","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/fix_hm_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a matrix generate color scale for heatmap. — fix_hm_colors","title":"Given a matrix generate color scale for heatmap. — fix_hm_colors","text":"Given matrix generate color scale heatmap.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/fix_hm_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a matrix generate color scale for heatmap. — fix_hm_colors","text":"","code":"fix_hm_colors(hm_matrix)"},{"path":"https://cparsania.github.io/parcutils/reference/fix_hm_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a matrix generate color scale for heatmap. — fix_hm_colors","text":"hm_matrix","code":""},{"path":"https://cparsania.github.io/parcutils/reference/fix_hm_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a matrix generate color scale for heatmap. — fix_hm_colors","text":"color ComplexHeatmap::Heatmap().","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_all_named_expression_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get named list of gene expression matrix for all samples in x. — get_all_named_expression_matrix","title":"Get named list of gene expression matrix for all samples in x. — get_all_named_expression_matrix","text":"Get named list gene expression matrix samples x.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_all_named_expression_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get named list of gene expression matrix for all samples in x. — get_all_named_expression_matrix","text":"","code":"get_all_named_expression_matrix(x)"},{"path":"https://cparsania.github.io/parcutils/reference/get_all_named_expression_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get named list of gene expression matrix for all samples in x. — get_all_named_expression_matrix","text":"x object class parcutils.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_all_named_expression_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get named list of gene expression matrix for all samples in x. — get_all_named_expression_matrix","text":"named list gene expression matrix.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_deg.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential expression analysis using DESeq2::DESeq() — get_deg","title":"Perform differential expression analysis using DESeq2::DESeq() — get_deg","text":"wrapper function build upon DESeq2::DESeq()   DESeq2::DESeqResults(). find diff genes categories based various cutoffs p-value, padj-value, log2fc etc. also allows selecting genes diff analysis based upon minimum counts across samples within group (e.g. minimum counts across replicate samples).","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_deg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential expression analysis using DESeq2::DESeq() — get_deg","text":"","code":"get_deg(   counts,   column_geneid,   column_samples,   sample_info,   group_numerator,   group_denominator,   delim = \"\\t\",   comment_char = \"#\",   min_counts = 10,   min_replicates = 1,   cutoff_lfc = 1,   cutoff_pval = 0.05,   cutoff_padj = 0.01,   regul_based_upon = 1,   ... )"},{"path":"https://cparsania.github.io/parcutils/reference/get_deg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential expression analysis using DESeq2::DESeq() — get_deg","text":"counts character string providing name count file data frame counts gene. See details know format file count data frame. column_geneid character string denoting column geneid counts column_samples character vector denoting names sample columns counts sample_info character string denoting name sample information file data frame. file data frame must least two columns without column names. First column denotes samples names second column denotes group name sample first column. e.g. group_numerator character vector denoting sample groups use numerator calculate fold change. group_denominator character vector denoting sample groups use denominator calculate fold change. delim character denoting deliminator count file. valid count file path. comment_char character denoting comments line count file. valid count file path. min_counts numeric value, default 10,  denoting minimum counts gene used o consider gene differential expression analysis. min_replicates numeric value, default 1, denoting minimum samples within group must minimum_counts. Value provided must higher number replicates group. example given values min_replicates = 2  minimum_counts = 10 genes minimum counts 10 atleast 2 sample groups used DEG. cutoff_lfc numeric value internally passed categorize_diff_genes cutoff_pval numeric value internally passed categorize_diff_genes cutoff_padj numeric value internally passed categorize_diff_genes regul_based_upon either 1, 2 3 internally passed categorize_diff_genes ... future use","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_deg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform differential expression analysis using DESeq2::DESeq() — get_deg","text":"data frame DESeq results, DEG, DEG summary.","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/get_fold_change_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a fold change matrix — get_fold_change_matrix","title":"Prepare a fold change matrix — get_fold_change_matrix","text":"function returns dataframe first column gene names subsequent columns fold change values comparisons passed sample_comparisons.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_fold_change_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a fold change matrix — get_fold_change_matrix","text":"","code":"get_fold_change_matrix(x, sample_comparisons, genes)"},{"path":"https://cparsania.github.io/parcutils/reference/get_fold_change_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a fold change matrix — get_fold_change_matrix","text":"x abject class \"parcutils\". output function run_deseq_analysis(). sample_comparisons character vector denoting sample comparisons fold change values derived. genes character vector denoting gene names fold change values derived.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_fold_change_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a fold change matrix — get_fold_change_matrix","text":"tbl.","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/get_gene_expression_box_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a box plot — get_gene_expression_box_plot","title":"Generate a box plot — get_gene_expression_box_plot","text":"Generate box plot","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_gene_expression_box_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a box plot — get_gene_expression_box_plot","text":"","code":"get_gene_expression_box_plot(   x,   samples = NULL,   genes = NULL,   group_replicates = F,   convert_log2 = T )"},{"path":"https://cparsania.github.io/parcutils/reference/get_gene_expression_box_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a box plot — get_gene_expression_box_plot","text":"x abject class \"parcutils\". output function run_deseq_analysis(). samples character vector denoting samples plot boxplot, default NULL. set NULL samples accounted. genes character vector denoting genes consider boxplot, default NULL. set NULL genes accounted. group_replicates logical, default FALSE, whether group replicates individual plots. convert_log2 logical, default TRUE, whether plot log2(noralised expression + 1) .","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_gene_expression_box_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a box plot — get_gene_expression_box_plot","text":"object class ggplot2","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/get_gene_expression_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a heatmap of normalised gene expression values, z-score or log2 fold-change values. — get_gene_expression_heatmap","title":"Generate a heatmap of normalised gene expression values, z-score or log2 fold-change values. — get_gene_expression_heatmap","text":"Heatmap common tool show gene expression pattern across samples RNA-seq experiment. data exploration, common practice generate several heatmaps identify interesting patterns gene expression across sample. heatmap generating tools require data tabular form. However, prepare tabular form requires significant data wrangling sub-setting genes (rows) samples (columns) specifically RNA-seq studies studies consisting several samples replicates. function cut downs several steps data wrangling create heatmap gene expression, z-score log2 fold-change . Given object 'parcutils', names samples sample comprisons, genes show heatmap several arguments creates heatmap.output function output function ComplexHeatmap::Heatmap() can used functions ComplexHeatmap package.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_gene_expression_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a heatmap of normalised gene expression values, z-score or log2 fold-change values. — get_gene_expression_heatmap","text":"","code":"get_gene_expression_heatmap(   x,   samples,   genes,   repair_genes = FALSE,   convert_log2 = FALSE,   color_default = TRUE,   col = NULL,   convert_zscore = TRUE,   summarise_replicates = TRUE,   summarise_method = \"median\",   show_row_names = FALSE,   cluster_rows = TRUE,   show_row_dend = TRUE,   row_names_font_size = 10,   show_column_names = TRUE,   cluster_columns = TRUE,   show_heatmap_legend = TRUE,   ... )  get_fold_change_heatmap(   x,   sample_comparisons,   genes,   repair_genes = FALSE,   color_default = TRUE,   col = NULL,   show_row_names = FALSE,   cluster_rows = TRUE,   show_row_dend = TRUE,   row_names_font_size = 10,   show_column_names = TRUE,   cluster_columns = TRUE,   show_heatmap_legend = TRUE,   ... )"},{"path":"https://cparsania.github.io/parcutils/reference/get_gene_expression_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a heatmap of normalised gene expression values, z-score or log2 fold-change values. — get_gene_expression_heatmap","text":"x abject class \"parcutils\". output function run_deseq_analysis(). samples character vector denoting sample names show heatmap. genes character vector denoting genes show heatmap. repair_genes logical, default FALSE, indicating whether repair gene names . See details. convert_log2 logical, default FALSE, indicating whether convert gene expression values log2 . color_default logical, default TRUE, indicating whether use default heatmap colors. col output circlize::colorRamp2(), default NULL. convert_zscore logical, default TRUE, indicating whether convert gene expression values z-score . see details. summarise_replicates logical, default TRUE, indicating whether summarise values gene across replicates. summarise_method character string, either mean median. show_row_names logical, default FALSE, indicating whether show row names heatmap . Internally argument passed function ComplexHeatmap::Heatmap(). cluster_rows logical, default TRUE, indicating whether cluster rows heatmap . Internally argument passed function ComplexHeatmap::Heatmap(). show_row_dend logical, default TRUE, indicating whether show dendrogram heatmap . Internally argument passed function ComplexHeatmap::Heatmap(). row_names_font_size numeric value, default 10, indicating size row names heatmap. show_column_names logical, default TRUE, indicating whether show column names heatmap . Internally argument passed function ComplexHeatmap::Heatmap(). cluster_columns logical, default TRUE, indicating whether cluster columns heatmap . Internally argument passed function ComplexHeatmap::Heatmap(). show_heatmap_legend logical, default TRUE, indicating whether show heatmap legend . ... parameters passes ComplexHeatmap::Heatmap(). sample_comparisons character vector denoting sample comparisons heatmap log2 fold-change plotted.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_gene_expression_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a heatmap of normalised gene expression values, z-score or log2 fold-change values. — get_gene_expression_heatmap","text":"output function ComplexHeatmap::Heatmap().","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_gene_expression_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a heatmap of normalised gene expression values, z-score or log2 fold-change values. — get_gene_expression_heatmap","text":"function get_gene_expression_heatmap create heatmap either normalised gene expression z-score values function get_fold_change_heatmap create heatmap log2 fold-changes values. repair_genes :  Internally gene names stored \"gene_id:gene_symbol\" format. example, \"ENSG00000187634:SAMD11\". repair_genes set TRUE string corresponding gene_id followed \":\" removed. useful gene names revealed heatmap. convert_zscore :  set TRUE values gene converted z-score. z-score calculated baser r function base::scale() default parameters.","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/get_genes_by_regulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genes from based on their differential regulation (up, down, both, other and all) — get_genes_by_regulation","title":"Get genes from based on their differential regulation (up, down, both, other and all) — get_genes_by_regulation","text":"Get genes based differential regulation (, , , )","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_genes_by_regulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genes from based on their differential regulation (up, down, both, other and all) — get_genes_by_regulation","text":"","code":"get_genes_by_regulation(x, sample_comparison, regulation = \"both\")"},{"path":"https://cparsania.github.io/parcutils/reference/get_genes_by_regulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genes from based on their differential regulation (up, down, both, other and all) — get_genes_by_regulation","text":"x abject class \"parcutils\". output function run_deseq_analysis(). sample_comparison character string denoting sample comparison genes obtained. regulation character string, default . Values can one , , , , . : returns regulated genes. : returns regulated genes. : returns regulated genes. : returns genes regulated genes. : returns genes.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_genes_by_regulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genes from based on their differential regulation (up, down, both, other and all) — get_genes_by_regulation","text":"named vector.","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/get_heatmap_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from a heatmap in the same order. — get_heatmap_data","title":"Get data from a heatmap in the same order. — get_heatmap_data","text":"Get data heatmap order.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_heatmap_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from a heatmap in the same order. — get_heatmap_data","text":"","code":"get_heatmap_data(h)"},{"path":"https://cparsania.github.io/parcutils/reference/get_heatmap_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from a heatmap in the same order. — get_heatmap_data","text":"h object class ComplexHeatmap::Heatmap()","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_heatmap_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from a heatmap in the same order. — get_heatmap_data","text":"tbl.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_heatmap_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from a heatmap in the same order. — get_heatmap_data","text":"","code":"if (FALSE) { # // TO DO }"},{"path":"https://cparsania.github.io/parcutils/reference/get_intergenic_signals.html","id":null,"dir":"Reference","previous_headings":"","what":"Find signal intensity of intergenic regions. — get_intergenic_signals","title":"Find signal intensity of intergenic regions. — get_intergenic_signals","text":"given .gff file .bw file function finds intergenic regions associate signal inensity region","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_intergenic_signals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find signal intensity of intergenic regions. — get_intergenic_signals","text":"","code":"get_intergenic_signals(bw_file, gff_file)"},{"path":"https://cparsania.github.io/parcutils/reference/get_intergenic_signals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find signal intensity of intergenic regions. — get_intergenic_signals","text":"bw_file string denoting path .bw file gff_file string denoting path gff file.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_intergenic_signals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find signal intensity of intergenic regions. — get_intergenic_signals","text":"object class GenomicRanges::granges() can exported various file formats bw, bed, begraph etc.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_intergenic_signals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find signal intensity of intergenic regions. — get_intergenic_signals","text":"","code":"if (FALSE) { #' library(\"magrittr\") bw_file <- system.file(\"extdata\" , \"example.bw\" , package = \"parcutils\") gff_file <- system.file(\"extdata\" ,                        \"C_glabrata_CBS138_version_s02-m07-r06_features.gff\" , package = \"parcutils\") oo <- parcutils::get_intergenic_signals(bw_file = bw_file,gff_file  = gff_file) oo %>%     rtracklayer::export.bed(con = file(paste(\"intergenic\", \".bed\",sep = \"\"))) oo %>%    rtracklayer::export.bedGraph(con = file(paste(\"intergenic\", \".bdg\",sep = \"\"))) }"},{"path":"https://cparsania.github.io/parcutils/reference/get_normalised_expression_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a matrix of normalised gene expression values — get_normalised_expression_matrix","title":"Prepare a matrix of normalised gene expression values — get_normalised_expression_matrix","text":"function returns dataframe first column gene names subsequent columns normalised gene expression values comparisons passed sample_comparisons.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_normalised_expression_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a matrix of normalised gene expression values — get_normalised_expression_matrix","text":"","code":"get_normalised_expression_matrix(   x,   samples = NULL,   genes = NULL,   summarise_replicates = FALSE,   summarise_method = \"median\" )"},{"path":"https://cparsania.github.io/parcutils/reference/get_normalised_expression_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a matrix of normalised gene expression values — get_normalised_expression_matrix","text":"x abject class \"parcutils\". output function run_deseq_analysis(). samples character vector denoting samples normalised gene expression values derived, Default NULL. NULL returns samples x genes character vector denoting gene names normalised gene expression values derived, Default NULL. NULL returns samples x. summarise_replicates logical, default FALSE, indicating whether gene expression values summarised mean median replicates. summarise_method character string either \"mean\" \"median\" normalised gene expression values summarised replicates.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_normalised_expression_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a matrix of normalised gene expression values — get_normalised_expression_matrix","text":"tbl.","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/get_pairwise_corr_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get replicates correlation scatter plot — get_pairwise_corr_plot","title":"Get replicates correlation scatter plot — get_pairwise_corr_plot","text":"Get replicates correlation scatter plot","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_pairwise_corr_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get replicates correlation scatter plot — get_pairwise_corr_plot","text":"","code":"get_pairwise_corr_plot(x, samples = NULL, genes = NULL)"},{"path":"https://cparsania.github.io/parcutils/reference/get_pairwise_corr_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get replicates correlation scatter plot — get_pairwise_corr_plot","text":"x abject class \"parcutils\". output function run_deseq_analysis(). samples character vector denoting samples plot scatter plot, default NULL. set NULL samples accounted. genes character vector denoting genes consider scatter plot, default NULL. set NULL genes accounted.#'","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_pairwise_corr_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get replicates correlation scatter plot — get_pairwise_corr_plot","text":"named list.","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/get_pca_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a PCA plot. — get_pca_plot","title":"Generate a PCA plot. — get_pca_plot","text":"Generate PCA plot.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_pca_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a PCA plot. — get_pca_plot","text":"","code":"get_pca_plot(   x,   samples = NULL,   genes = NULL,   circle_size = 10,   label_replicates = FALSE )"},{"path":"https://cparsania.github.io/parcutils/reference/get_pca_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a PCA plot. — get_pca_plot","text":"x abject class \"parcutils\". output function run_deseq_analysis(). samples character vector denoting samples plot PCA plot, default NULL. set NULL samples accounted. genes character vector denoting genes consider PCA plot, default NULL. set NULL genes accounted. circle_size numeric value,  default  10, denoting size circles PCA plot. show_replicates logical, degfault FALSE, denoting whether label replicates PCA plot.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_pca_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a PCA plot. — get_pca_plot","text":"object ggplot2.","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/get_replicates_by_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Group replicates by sample - returns list — get_replicates_by_sample_list","title":"Group replicates by sample - returns list — get_replicates_by_sample_list","text":"Group replicates sample - returns list","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_replicates_by_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group replicates by sample - returns list — get_replicates_by_sample_list","text":"","code":"get_replicates_by_sample_list(x)"},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/get_rpkm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate RPKM (Reads per kilobase per million). — get_rpkm","title":"Calculate RPKM (Reads per kilobase per million). — get_rpkm","text":"given raw counts length genomic features function returns normalized counts reads per kilo-base per million  (RPKM).","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_rpkm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate RPKM (Reads per kilobase per million). — get_rpkm","text":"","code":"get_rpkm(counts, lengths)"},{"path":"https://cparsania.github.io/parcutils/reference/get_rpkm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate RPKM (Reads per kilobase per million). — get_rpkm","text":"counts numeric vector giving counts reads aligned genomic intervals. lengths numeric vector giving length genomic intervals.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_rpkm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate RPKM (Reads per kilobase per million). — get_rpkm","text":"numeric vector giving RPKM","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_star_align_log_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get alignment summary of STAR aligner — get_star_align_log_summary","title":"Get alignment summary of STAR aligner — get_star_align_log_summary","text":"Get alignment summary STAR aligner","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_star_align_log_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get alignment summary of STAR aligner — get_star_align_log_summary","text":"","code":"get_star_align_log_summary(log_file)"},{"path":"https://cparsania.github.io/parcutils/reference/get_star_align_log_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get alignment summary of STAR aligner — get_star_align_log_summary","text":"log_file string denoting path *Log.final.file generated STAR aligner.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_star_align_log_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get alignment summary of STAR aligner — get_star_align_log_summary","text":"tbl.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_star_aling_log_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get alignment summary of STAR aligner — get_star_aling_log_summary","title":"Get alignment summary of STAR aligner — get_star_aling_log_summary","text":"Get alignment summary STAR aligner","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_star_aling_log_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get alignment summary of STAR aligner — get_star_aling_log_summary","text":"","code":"get_star_aling_log_summary(log_file)"},{"path":"https://cparsania.github.io/parcutils/reference/get_star_aling_log_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get alignment summary of STAR aligner — get_star_aling_log_summary","text":"log_file string denoting path *Log.final.file generated STAR aligner.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_star_aling_log_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get alignment summary of STAR aligner — get_star_aling_log_summary","text":"tbl.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_tpm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate TPM (Tags Per Million). — get_tpm","title":"Calculate TPM (Tags Per Million). — get_tpm","text":"given raw counts length genomic features function returns normalized counts tags per million (TPM).","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_tpm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate TPM (Tags Per Million). — get_tpm","text":"","code":"get_tpm(counts, lengths)"},{"path":"https://cparsania.github.io/parcutils/reference/get_tpm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate TPM (Tags Per Million). — get_tpm","text":"counts numeric vector giving counts reads aligned genomic intervals. lengths numeric vector giving length genomic intervals.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_tpm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate TPM (Tags Per Million). — get_tpm","text":"numeric vector giving TPM","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_upset_intersects.html","id":null,"dir":"Reference","previous_headings":"","what":"Get intersects of upset plot. — get_upset_intersects","title":"Get intersects of upset plot. — get_upset_intersects","text":"Get intersects upset plot.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_upset_intersects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get intersects of upset plot. — get_upset_intersects","text":"","code":"get_upset_intersects(upset_data, upset_plot)"},{"path":"https://cparsania.github.io/parcutils/reference/get_upset_intersects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get intersects of upset plot. — get_upset_intersects","text":"upset_data list upset_plot output UpSetR::upset()","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_upset_intersects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get intersects of upset plot. — get_upset_intersects","text":"tbl","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_upset_intersects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get intersects of upset plot. — get_upset_intersects","text":"","code":"if (FALSE) { set.seed(123) x <- list(A = sample(1:5, 10, replace = T ) , B = sample(1:5, 10, replace = T ) , c = sample(1:10, 10, replace = T)) us <- UpSetR::upset(UpSetR::fromList(x)) get_upset_intersects(x , us )  }"},{"path":"https://cparsania.github.io/parcutils/reference/get_volcano_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a volcano plot. — get_volcano_plot","title":"Generate a volcano plot. — get_volcano_plot","text":"Generate volcano plot.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_volcano_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a volcano plot. — get_volcano_plot","text":"","code":"get_volcano_plot(   x,   sample_comparison,   log2fc_cutoff = 1,   pval_cutoff = 0.05,   genes_to_display = NULL,   lab_size = 3,   point_size = 1,   col_up = \"#a40000\",   col_down = \"#007e2f\",   col_other = \"grey\",   ... )"},{"path":"https://cparsania.github.io/parcutils/reference/get_volcano_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a volcano plot. — get_volcano_plot","text":"x abject class \"parcutils\". output function run_deseq_analysis(). sample_comparison character string denoting valid differatnial gene comparison. Possible comparisons can found x$comp. log2fc_cutoff numeric value, default 1. pval_cutoff numeric value, default 0.05. genes_to_display character vector genes display volcano plot, default NULL, displays non overlapping genes. lab_size numeric value, default 3, denoting size lables. point_size numeric value, default 1, denoting size points col_up character string, default \"a40000\", denoting valid color code regulated genes. col_down character string, default \"007e2f\", denoting valid color code regulated genes. col_other character string, default \"grey\", denoting valid color code regulated genes. ... parameters passed EnhancedVolcano::EnhancedVolcano()","code":""},{"path":"https://cparsania.github.io/parcutils/reference/get_volcano_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a volcano plot. — get_volcano_plot","text":"ggplot","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/group_replicates_by_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Group replicates by samples. — group_replicates_by_sample","title":"Group replicates by samples. — group_replicates_by_sample","text":"Group replicates samples.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/group_replicates_by_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group replicates by samples. — group_replicates_by_sample","text":"","code":"group_replicates_by_sample(x)"},{"path":"https://cparsania.github.io/parcutils/reference/group_replicates_by_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group replicates by samples. — group_replicates_by_sample","text":"x abject class \"parcutils\". output function run_deseq_analysis().","code":""},{"path":"https://cparsania.github.io/parcutils/reference/group_replicates_by_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group replicates by samples. — group_replicates_by_sample","text":"tbl.","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/named_group_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split grouped data with names. A wrapper around dplyr::group_by()\nref: https://github.com/tidyverse/dplyr/issues/4223 — named_group_split","title":"Split grouped data with names. A wrapper around dplyr::group_by()\nref: https://github.com/tidyverse/dplyr/issues/4223 — named_group_split","text":"Split grouped data names. wrapper around dplyr::group_by() ref: https://github.com/tidyverse/dplyr/issues/4223","code":""},{"path":"https://cparsania.github.io/parcutils/reference/named_group_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split grouped data with names. A wrapper around dplyr::group_by()\nref: https://github.com/tidyverse/dplyr/issues/4223 — named_group_split","text":"","code":"named_group_split(.tbl, ..., keep_order = T)"},{"path":"https://cparsania.github.io/parcutils/reference/named_group_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split grouped data with names. A wrapper around dplyr::group_by()\nref: https://github.com/tidyverse/dplyr/issues/4223 — named_group_split","text":".tbl data frame ... arguments pass dplyr::group_by() keep_order logical, default TRUE, whether maintain original order groups.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/named_group_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split grouped data with names. A wrapper around dplyr::group_by()\nref: https://github.com/tidyverse/dplyr/issues/4223 — named_group_split","text":"named list","code":""},{"path":"https://cparsania.github.io/parcutils/reference/named_group_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split grouped data with names. A wrapper around dplyr::group_by()\nref: https://github.com/tidyverse/dplyr/issues/4223 — named_group_split","text":"","code":"if (FALSE) { a <- tibble::tibble(x = 1:5, y = sample(letters[1:5])) a  %>% named_group_split(y) a  %>% named_group_split(y , keep_order = F) }"},{"path":"https://cparsania.github.io/parcutils/reference/normalise_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive normalized counts from raw read numbers — normalise_counts","title":"Derive normalized counts from raw read numbers — normalise_counts","text":"function allows converting raw read counts normalized counts either method Tags Per Million (TPM) Reads Per Kilo-base Per Million (RPKM)","code":""},{"path":"https://cparsania.github.io/parcutils/reference/normalise_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive normalized counts from raw read numbers — normalise_counts","text":"","code":"normalise_counts(x, .vars, method = \"TPM\")"},{"path":"https://cparsania.github.io/parcutils/reference/normalise_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive normalized counts from raw read numbers — normalise_counts","text":"x dataframe raw counts along mandatory columns GeneID, Chr, Start, End, Strand, Length. .vars character vector containing columns x. Normalization performed columns. method character string, default TPM. Choices one TPM, RPKM.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/normalise_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive normalized counts from raw read numbers — normalise_counts","text":"dataframe mandatory columns along columns mentioned .vars. Remaining columns x dropped.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/normalise_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive normalized counts from raw read numbers — normalise_counts","text":"implemntaion RPKM TPM can seen functions get_tpm() get_rpkm() respectively.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/normalise_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive normalized counts from raw read numbers — normalise_counts","text":"","code":"if (FALSE) { set.seed(123) tt <- tibble::tibble(GeneID = c(paste(\"Gene_\",1:5,sep = \"\")),                      Chr = \"Chr1\",                      Start = sample(1:100, 5),                      End = sample(100:200,5),                      Strand = sample(c(\"+\" ,\"-\"), 5, replace = T),                      Length = (End - Start )+ 1 )  tt %<>% dplyr::mutate(sample_1 = sample(c(1:100),5)*10 ,                       sample_2 = sample(c(1:100),5)*10 ,                       sample_3 = sample(c(1:100),5)*100,                       sample_4 = sample(c(1:100),5)*100 )   normalise_counts(x = tt, .vars = c(\"sample_1\",\"sample_2\") ,method = \"TPM\") normalise_counts(x = tt, .vars = c(\"sample_1\",\"sample_2\") ,method = \"RPKM\") }"},{"path":"https://cparsania.github.io/parcutils/reference/piarwise_upset.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate upset plots for DEG between a comparison. — piarwise_upset","title":"Generate upset plots for DEG between a comparison. — piarwise_upset","text":"function called plot_deg_upsets().","code":""},{"path":"https://cparsania.github.io/parcutils/reference/piarwise_upset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate upset plots for DEG between a comparison. — piarwise_upset","text":"","code":"piarwise_upset(   x,   sample_comparison,   color_up = \"#b30000\",   color_down = \"#006d2c\",   ... )"},{"path":"https://cparsania.github.io/parcutils/reference/piarwise_upset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate upset plots for DEG between a comparison. — piarwise_upset","text":"x abject class \"parcutils\". output function run_deseq_analysis(). sample_comparison character vector length 2 denoting  sample comparisons upset plot generated. color_up character string denoting valid color code bars upset plot regulated genes. color_down character string denoting valid color code bars upset plot regulated genes. ... arguments passed UpSetR::upset().","code":""},{"path":"https://cparsania.github.io/parcutils/reference/piarwise_upset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate upset plots for DEG between a comparison. — piarwise_upset","text":"object named list element list two - 1)  upset plots  UpSetR::upset() intersections form tibble.","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/plot_deg_upsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate upset plots for DEG between comparisons. — plot_deg_upsets","title":"Generate upset plots for DEG between comparisons. — plot_deg_upsets","text":"Given set DEG comparisons, functions returns UpSetR::upset() plots genes 2 comparisons. upset plot generated function also returns interaction form tibble.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/plot_deg_upsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate upset plots for DEG between comparisons. — plot_deg_upsets","text":"","code":"plot_deg_upsets(   x,   sample_comparisons,   color_up = \"#b30000\",   color_down = \"#006d2c\" )"},{"path":"https://cparsania.github.io/parcutils/reference/plot_deg_upsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate upset plots for DEG between comparisons. — plot_deg_upsets","text":"x x abject class \"parcutils\". output function run_deseq_analysis(). sample_comparisons character vector denoting  sample comparisons upset plot generated. color_up character string denoting valid color code bars upset plot regulated genes. color_down character string denoting valid color code bars upset plot regulated genes.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/plot_deg_upsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate upset plots for DEG between comparisons. — plot_deg_upsets","text":"object named list element list two - 1)  upset plots  UpSetR::upset() intersections form tibble.","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/plot_regions_relative_to_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate segment plot to visualize genomic regions related to reference regions. — plot_regions_relative_to_reference","title":"Generate segment plot to visualize genomic regions related to reference regions. — plot_regions_relative_to_reference","text":"Generate segment plot visualize genomic regions related reference regions.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/plot_regions_relative_to_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate segment plot to visualize genomic regions related to reference regions. — plot_regions_relative_to_reference","text":"","code":"plot_regions_relative_to_reference(query, reference)"},{"path":"https://cparsania.github.io/parcutils/reference/plot_regions_relative_to_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate segment plot to visualize genomic regions related to reference regions. — plot_regions_relative_to_reference","text":"query object GenomicRanges::granges() visualized relative reference reference object GenomicRanges::granges() query regions mapped.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/plot_regions_relative_to_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate segment plot to visualize genomic regions related to reference regions. — plot_regions_relative_to_reference","text":"list containing segment plot plot data","code":""},{"path":"https://cparsania.github.io/parcutils/reference/plot_regions_relative_to_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate segment plot to visualize genomic regions related to reference regions. — plot_regions_relative_to_reference","text":"","code":"if (FALSE) { ref_file <- system.file(\"extdata\", \"Homo_sapiens.GRCh38.101.gtf.gz\" ,package = \"parcutils\") ref_data <- rtracklayer::import(ref_file)  %>%  tibble::as_tibble() %>%  dplyr::mutate(seqnames = stringr::str_c(\"chr\",seqnames ,sep = \"\")) %>% plyranges::as_granges()  ref_data_gr <-  ref_data %>% dplyr::filter(type == \"gene\" & gene_biotype == \"protein_coding\") query_regions_gr <- ref_data %>% dplyr::filter(type == \"Selenocysteine\")  %>% sample(5000)  oo <- plot_regions_relative_to_reference(query = query_regions_gr, reference  =  ref_data_gr)  oo$plot oo$data %>% ggplot2::ggplot(aes(x = q_relt_start)) + geom_density() }"},{"path":"https://cparsania.github.io/parcutils/reference/run_deseq_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential expression analysis using DESeq2::DESeq() — run_deseq_analysis","title":"Perform differential expression analysis using DESeq2::DESeq() — run_deseq_analysis","text":"wrapper function build upon DESeq2::DESeq()   DESeq2::DESeqResults() find diff genes categories based various cutoffs p-value, padj-value, log2fc etc. also allows selecting genes diff analysis based upon minimum counts across samples within group (e.g. minimum counts across replicate samples).","code":""},{"path":"https://cparsania.github.io/parcutils/reference/run_deseq_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential expression analysis using DESeq2::DESeq() — run_deseq_analysis","text":"","code":"run_deseq_analysis(   counts,   column_geneid,   column_samples,   sample_info,   group_numerator,   group_denominator,   delim = \"\\t\",   comment_char = \"#\",   min_counts = 10,   min_replicates = 1,   cutoff_lfc = 1,   cutoff_pval = 0.05,   cutoff_padj = 0.01,   regul_based_upon = 1,   ... )"},{"path":"https://cparsania.github.io/parcutils/reference/run_deseq_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential expression analysis using DESeq2::DESeq() — run_deseq_analysis","text":"counts character string providing name count file data frame counts gene. See details know format file count data frame. column_geneid character string denoting column geneid counts column_samples character vector denoting names sample columns counts sample_info character string denoting name sample information file data frame. file data frame must least two columns without column names. First column denotes samples names second column denotes group name sample first column. e.g. group_numerator character vector denoting sample groups use numerator calculate fold change. group_denominator character vector denoting sample groups use denominator calculate fold change. delim character denoting deliminator count file. valid count file path. comment_char character denoting comments line count file. valid count file path. min_counts numeric value, default 10,  denoting minimum counts gene used o consider gene differential expression analysis. min_replicates numeric value, default 1, denoting minimum samples within group must minimum_counts. Value provided must higher number replicates group. example given values min_replicates = 2  minimum_counts = 10 genes minimum counts 10 atleast 2 sample groups used DEG. cutoff_lfc numeric value internally passed categorize_diff_genes cutoff_pval numeric value internally passed categorize_diff_genes cutoff_padj numeric value internally passed categorize_diff_genes regul_based_upon either 1, 2 3 internally passed categorize_diff_genes ... future use","code":""},{"path":"https://cparsania.github.io/parcutils/reference/run_deseq_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform differential expression analysis using DESeq2::DESeq() — run_deseq_analysis","text":"data frame DESeq results, DEG, DEG summary.","code":""},{"path":[]},{"path":"https://cparsania.github.io/parcutils/reference/sort_geom_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort order of box obtained from geom_boxplot — sort_geom_box","title":"Sort order of box obtained from geom_boxplot — sort_geom_box","text":"Sort order box obtained geom_boxplot","code":""},{"path":"https://cparsania.github.io/parcutils/reference/sort_geom_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort order of box obtained from geom_boxplot — sort_geom_box","text":"","code":"sort_geom_box(x, decreasing = T)"},{"path":"https://cparsania.github.io/parcutils/reference/sort_geom_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort order of box obtained from geom_boxplot — sort_geom_box","text":"x ggplot2 atleast one layer geom_boxplot decreasing logical, default T, indicating whether box arraged increasing decreasing order.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/sort_geom_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort order of box obtained from geom_boxplot — sort_geom_box","text":"ggplot.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/sort_geom_box.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort order of box obtained from geom_boxplot — sort_geom_box","text":"","code":"if (FALSE) { library(ggplot2) dd <- iris %>%   tidyr::pivot_longer(cols = Sepal.Length:Petal.Width)  # single layer ss <- dd %>%   ggplot2::ggplot() +   geom_boxplot(aes(x = name, y = value)) sort_geom_box(x = ss,decreasing = T) sort_geom_box(x = ss,decreasing = F)  # multiple layer ss <- dd %>%   ggplot2::ggplot() +   geom_point(aes(y = value , x = name)) +   geom_boxplot(aes(x = name, y = value)) sort_geom_box(x = ss,decreasing = T) sort_geom_box(x = ss,decreasing = F) }"},{"path":"https://cparsania.github.io/parcutils/reference/validata_parcutils_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if an object is of class 'parcutils'. — validata_parcutils_obj","title":"Validate if an object is of class 'parcutils'. — validata_parcutils_obj","text":"Validate object class 'parcutils'.","code":""},{"path":"https://cparsania.github.io/parcutils/reference/validata_parcutils_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if an object is of class 'parcutils'. — validata_parcutils_obj","text":"","code":"validata_parcutils_obj(x)"},{"path":"https://cparsania.github.io/parcutils/reference/validata_parcutils_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if an object is of class 'parcutils'. — validata_parcutils_obj","text":"x","code":""},{"path":[]}]
